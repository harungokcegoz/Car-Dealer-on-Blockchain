{
  "contractName": "CarRegistry",
  "abi": [],
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"project:/contracts/ContractForTrading.sol\":\"CarRegistry\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"project:/contracts/ContractForTrading.sol\":{\"keccak256\":\"0x8deee8048ed86ceb8ad6cc9c44a2f5cd442edf53508a3898ec6c797376668e39\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://fd385b15b8c70f7e3198d59e76cb8b1228117523af145616d8ca73eb7e42323d\",\"dweb:/ipfs/QmcT5zAht8hjJqK4NxuaCCrztexzWXBjHaBvufNB519dds\"]}},\"version\":1}",
  "bytecode": "0x6080604052348015600f57600080fd5b50603f80601d6000396000f3fe6080604052600080fdfea264697066735822122094592b21c89d84cef8624492ee4f4e97e50f7923a282742fb6a99dc26ce2d6a064736f6c63430008130033",
  "deployedBytecode": "0x6080604052600080fdfea264697066735822122094592b21c89d84cef8624492ee4f4e97e50f7923a282742fb6a99dc26ce2d6a064736f6c63430008130033",
  "immutableReferences": {},
  "generatedSources": [],
  "deployedGeneratedSources": [],
  "sourceMap": "58:3853:0:-:0;;;;;;;;;;;;;;;;;;;",
  "deployedSourceMap": "58:3853:0:-:0;;;;;",
  "source": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\ncontract CarRegistry {\n    struct Car {\n        string licensePlate;\n        string chassisNumber;\n        string brand;\n        string carType;\n        string color;\n        uint256 mileage;\n        address owner;\n        uint256 askingPrice;\n        bool forSale;\n    }\n\n    // mapping(uint256 => Car) public cars;\n    // uint256 public carCount;\n    // mapping(address => bool) public owners;\n\n    // event CarRegistered(uint256 indexed carId, address indexed owner);\n    // event MileageUpdated(uint256 indexed carId, uint256 mileage);\n    // event CarListedForSale(uint256 indexed carId, uint256 askingPrice);\n    // event CarSold(uint256 indexed carId, address indexed oldOwner, address indexed newOwner, uint256 sellingPrice);\n\n    // modifier onlyOwner() {\n    //     require(owners[msg.sender], \"Only the contract owner can perform this action\");\n    //     _;\n    // }\n\n    // modifier onlyCarOwner(uint256 _carId) {\n    //     require(cars[_carId].owner == msg.sender, \"Only the owner can perform this action\");\n    //     _;\n    // }\n\n    // constructor() {\n    //     owners[msg.sender] = true;\n    // }\n\n    // function registerCar(\n    //     string memory _licensePlate,\n    //     string memory _chassisNumber,\n    //     string memory _brand,\n    //     string memory _carType,\n    //     string memory _color\n    //     ) external {\n    //     cars[carCount] = Car({\n    //         licensePlate: _licensePlate,\n    //         chassisNumber: _chassisNumber,\n    //         brand: _brand,\n    //         carType: _carType,\n    //         color: _color,\n    //         mileage: 0,\n    //         owner: msg.sender,\n    //         askingPrice: 0,\n    //         forSale: false\n    //     });\n\n    //     emit CarRegistered(carCount, msg.sender);\n    //     carCount++;\n    // }\n\n    // function updateMileage(uint256 _carId, uint256 _mileage) external onlyCarOwner(_carId) {\n    //     require(_mileage > cars[_carId].mileage, \"New mileage must be greater than current mileage\");\n\n    //     cars[_carId].mileage = _mileage;\n    //     emit MileageUpdated(_carId, _mileage);\n    // }\n\n    // function listCarForSale(uint256 _carId, uint256 _askingPrice) external onlyCarOwner(_carId) {\n    //     cars[_carId].forSale = true;\n    //     cars[_carId].askingPrice = _askingPrice;\n\n    //     emit CarListedForSale(_carId, _askingPrice);\n    // }\n\n    // function buyCar(uint256 _carId) external payable {\n    //     require(cars[_carId].forSale, \"Car is not listed for sale\");\n    //     require(msg.value >= cars[_carId].askingPrice, \"Insufficient payment\");\n\n    //     address payable oldOwner = payable(cars[_carId].owner);\n    //     oldOwner.transfer(msg.value);\n    //     cars[_carId].owner = msg.sender;\n    //     cars[_carId].forSale = false;\n\n    //     emit CarSold(_carId, oldOwner, msg.sender, msg.value);\n    // }\n\n    // function getCar(uint256 _carId) external view returns (\n    //     string memory licensePlate,\n    //     string memory chassisNumber,\n    //     string memory brand,\n    //     string memory carType,\n    //     string memory color,\n    //     uint256 mileage,\n    //     address owner,\n    //     uint256 askingPrice,\n    //     bool forSale\n    // ) {\n    //     Car memory car = cars[_carId];\n    //     return (\n    //         car.licensePlate,\n    //         car.chassisNumber,\n    //         car.brand,\n    //         car.carType,\n    //         car.color,\n    //         car.mileage,\n    //         car.owner,\n    //         car.askingPrice,\n    //         car.forSale\n    //     );\n    // }\n\n    // function addOwner(address _newOwner) external onlyOwner {\n    //     owners[_newOwner] = true;\n    // }\n\n    // function removeOwner(address _owner) external onlyOwner {\n    //     require(_owner != msg.sender, \"Cannot remove yourself as an owner\");\n    //     owners[_owner] = false;\n    // }\n}\n",
  "sourcePath": "/Users/harungokcegoz/Documents/blockchain-for-car-market/contracts/contracts/ContractForTrading.sol",
  "ast": {
    "absolutePath": "project:/contracts/ContractForTrading.sol",
    "exportedSymbols": {
      "CarRegistry": [
        21
      ]
    },
    "id": 22,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1,
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".19"
        ],
        "nodeType": "PragmaDirective",
        "src": "32:24:0"
      },
      {
        "abstract": false,
        "baseContracts": [],
        "canonicalName": "CarRegistry",
        "contractDependencies": [],
        "contractKind": "contract",
        "fullyImplemented": true,
        "id": 21,
        "linearizedBaseContracts": [
          21
        ],
        "name": "CarRegistry",
        "nameLocation": "67:11:0",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "canonicalName": "CarRegistry.Car",
            "id": 20,
            "members": [
              {
                "constant": false,
                "id": 3,
                "mutability": "mutable",
                "name": "licensePlate",
                "nameLocation": "113:12:0",
                "nodeType": "VariableDeclaration",
                "scope": 20,
                "src": "106:19:0",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_string_storage_ptr",
                  "typeString": "string"
                },
                "typeName": {
                  "id": 2,
                  "name": "string",
                  "nodeType": "ElementaryTypeName",
                  "src": "106:6:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_storage_ptr",
                    "typeString": "string"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 5,
                "mutability": "mutable",
                "name": "chassisNumber",
                "nameLocation": "142:13:0",
                "nodeType": "VariableDeclaration",
                "scope": 20,
                "src": "135:20:0",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_string_storage_ptr",
                  "typeString": "string"
                },
                "typeName": {
                  "id": 4,
                  "name": "string",
                  "nodeType": "ElementaryTypeName",
                  "src": "135:6:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_storage_ptr",
                    "typeString": "string"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 7,
                "mutability": "mutable",
                "name": "brand",
                "nameLocation": "172:5:0",
                "nodeType": "VariableDeclaration",
                "scope": 20,
                "src": "165:12:0",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_string_storage_ptr",
                  "typeString": "string"
                },
                "typeName": {
                  "id": 6,
                  "name": "string",
                  "nodeType": "ElementaryTypeName",
                  "src": "165:6:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_storage_ptr",
                    "typeString": "string"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 9,
                "mutability": "mutable",
                "name": "carType",
                "nameLocation": "194:7:0",
                "nodeType": "VariableDeclaration",
                "scope": 20,
                "src": "187:14:0",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_string_storage_ptr",
                  "typeString": "string"
                },
                "typeName": {
                  "id": 8,
                  "name": "string",
                  "nodeType": "ElementaryTypeName",
                  "src": "187:6:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_storage_ptr",
                    "typeString": "string"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 11,
                "mutability": "mutable",
                "name": "color",
                "nameLocation": "218:5:0",
                "nodeType": "VariableDeclaration",
                "scope": 20,
                "src": "211:12:0",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_string_storage_ptr",
                  "typeString": "string"
                },
                "typeName": {
                  "id": 10,
                  "name": "string",
                  "nodeType": "ElementaryTypeName",
                  "src": "211:6:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_storage_ptr",
                    "typeString": "string"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 13,
                "mutability": "mutable",
                "name": "mileage",
                "nameLocation": "241:7:0",
                "nodeType": "VariableDeclaration",
                "scope": 20,
                "src": "233:15:0",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 12,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "233:7:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 15,
                "mutability": "mutable",
                "name": "owner",
                "nameLocation": "266:5:0",
                "nodeType": "VariableDeclaration",
                "scope": 20,
                "src": "258:13:0",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                },
                "typeName": {
                  "id": 14,
                  "name": "address",
                  "nodeType": "ElementaryTypeName",
                  "src": "258:7:0",
                  "stateMutability": "nonpayable",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 17,
                "mutability": "mutable",
                "name": "askingPrice",
                "nameLocation": "289:11:0",
                "nodeType": "VariableDeclaration",
                "scope": 20,
                "src": "281:19:0",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 16,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "281:7:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 19,
                "mutability": "mutable",
                "name": "forSale",
                "nameLocation": "315:7:0",
                "nodeType": "VariableDeclaration",
                "scope": 20,
                "src": "310:12:0",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                },
                "typeName": {
                  "id": 18,
                  "name": "bool",
                  "nodeType": "ElementaryTypeName",
                  "src": "310:4:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  }
                },
                "visibility": "internal"
              }
            ],
            "name": "Car",
            "nameLocation": "92:3:0",
            "nodeType": "StructDefinition",
            "scope": 21,
            "src": "85:244:0",
            "visibility": "public"
          }
        ],
        "scope": 22,
        "src": "58:3853:0",
        "usedErrors": []
      }
    ],
    "src": "32:3880:0"
  },
  "compiler": {
    "name": "solc",
    "version": "0.8.19+commit.7dd6d404.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.4.16",
  "updatedAt": "2024-03-12T15:59:24.120Z",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  }
}